* Spacemacs Rocks Season 2 (Day 4)                                      :TOC:
   - [[#split-your-configs-into-multiple-files][Split your configs into multiple files]]
   - [[#major-mode-and-minor-mode-in-details][Major mode and minor mode in details]]
   - [[#better-defaults][Better Defaults]]
   - [[#exercise][Exercise]]

** Split your configs into multiple files
1. use Git to management your init file
cd C:\Users\alan\AppData\Roaming\.emacs.d  -file/git bash here
$ git init
$ git add .
$ git commit -m "first commit"
//未提交前恢复
$ git checkout init.el
  (init.el 中需设置(global-auto-revert-mode t) 即当外部文件修改时不用重新打开此文件)
//auto-save-list 不参加备份
$ vim .gitignore +auto-save-list
$ git add .gitignore
$ git commit -m "add .gitignore"
注：(setq auto-save-default nil)貌似不起作用！

2. help window is anoyying.. 
解决帮助窗口打开后，光标没有定位到此窗口，导致需进入此窗口后再按Q。
#+BEGIN_SRC emacs-lisp
;; add popwin mode
;; why this line is needed
(require 'popwin) (require 'init-packages)
   ;;when require, wh(setq company-minimum-prefix-length 1)en not require
(popwin-mode t)
#+END_SRC

3. load-file, load-path and load
require 调用 load; load 调用 load-file.
每个被调用el文件最后有一条（provide)函数，用于补充features列表。
自定义函数autoload方法：
例在init-better-defaults.el中：
#+BEGIN_SRC emacs-lisp
(defun test-autoload()
    (interactive)
    (message "test autoload"))
#+END_SRC
在init.el中：
#+BEGIN_SRC emacs-lisp
(autoload 'test-autoload "init-better-defaults")
(test-autoload)
;;开机后检查*message*，如果有test autoload则说明成功
#+END_SRC
如果用;;;###autoload则：
init-better-defaults.el中，自定义函数前加;;;###autoload.
init.el中：
#+BEGIN_SRC emacs-lisp
(update-file-autolads "~/.emacs.d/lisp/init-better-defaults.el" t "~/.emacs.d/lisp/init-better-defaults-autoload.el")
(load "init-better-defaults-autoload"）;; ？？？没有验证！！！
#+END_SRC
---31'00"---
4. features, provide and require, autoload
(package-initialize)将初始化所有带autoload注释的features;
自定义的el文件，最后一行应定义(provide 'init-packages)以声明此文件标识;
init.el 头部应加上(require 'init-packages)。
并在前面加上load-path路径(add-to-list 'load-path ..)
5. naming conventions
zilongshanren/xxxx //变量名或函数名
minor mode or major mode. //命名mode最好带自己的前缀
niubi-mode
niubi-xxx 

   all of the names should have a prefix, such that the naming conflicts could be minimal.  
6. define your abbrevs
因为系统补全，如zilongshanren/packages，会补全很长的名字。为解决这种情况，就定义自己的缩写。
例：输入8ms加空格或其它非字母则会补全为: Mircsoft .
#+BEGIN_SRC emacs-lisp
  (setq-default abbrev-mode t)

  (define-abbrev-table 'global-abbrev-table '(
                                              ;; signature
                                              ("8zl" "zilongshanren")
                                              ;; emacs regex
                                              
                                              ))
#+END_SRC
7. how to organize your configs
- init-packages.el //包相关
- init-ui.el  //显示相关
- init-better-defaults.el  //默认值
- init-keybindings.el  //快捷键
- custom.el  //存放自动生成配置。如init.el最后
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+END_SRC

8. use `counsel-git` to find file in git managed project.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c p f") 'counsel-git)
#+END_SRC


** Major mode and minor mode in details
1. conventions
text-mode/special-mode/prog-mode
naming:  xxx-mode,  xxx-mode-key-map  xxx-mode-hook

2. mode key map and mode hook

3. let's take a look at a pacakge in elpa (company)
   
** Better Defaults
1. disable audio bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

2. auto revert file when they are changed outside the editor
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

3. indent-region or buffer
*scratch*
M-x js2-mode
var myfun = ...
全选要重新排格式的代码块
M-x indent-region 可以缩进重排
下面代码块可以不用全选，重排整个buffer

#+BEGIN_SRC emacs-lisp
(defun indent-buffer()
  (interactive)
  (indent-region (point-min) (point-max)))

(defun indent-region-or-buffer()
  (interactive)
  (save-excursion
    (if (region-active-p)
	(progn
	  (indent-region (region-beginning) (region-end))
	  (message "Indent selected region."))
      (progn
	(indent-buffer)
	(message "Indent buffer.")))))

(global-set-key (kbd "C-M-\\") 'indent-region-or-buffer)

#+END_SRC

4. another way to complete thing in emacs
对company进行补充
#+BEGIN_SRC emacs-lisp
(setq hippie-expand-try-function-list '(try-expand-debbrev
					try-expand-debbrev-all-buffers
					try-expand-debbrev-from-kill
					try-complete-file-name-partially
					try-complete-file-name
					try-expand-all-abbrevs
					try-expand-list
					try-expand-line
					try-complete-lisp-symbol-partially
					try-complete-lisp-symbol))

(global-set-key (kbd "s-/") 'hippie-expand)
#+END_SRC

5. dired M-x d
+ 创建一个目录。如../test
C-x C-f 在test下新建一个文件
再按test目录进入后。如果没有新建的文件，则按g 刷新一下。
C: copy file
D: delete file
d: mark del file x: execute
R: rename file
(fset 'yes-or-no-p 'y-or-n) 简化询问输入

递归拷贝删除目录时可取消询问：
#+BEGIN_SRC emacs-lisp
(setq dired-recursive-deletes 'always)
(setq dired-recursive-copies 'always)
#+END_SRC

解决重复生成新buffer
#+BEGIN_SRC emacs-lisp
(put 'dired-find-alternate-file 'disabled nil)

;; 主动加载 Dired Mode
;; (require 'dired)
;; (defined-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)

;; 延迟加载
(with-eval-after-load 'dired
    (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file))

#+END_SRC

启用 dired-x 可以让每一次进入 Dired 模式时，使用新的快捷键 C-x C-j 就可以进入当前文件夹的所在的路径。
(require 'dired-x)

使用 (setq dired-dwim-target 1) 则可以使当一个窗口（frame）中存在两个分屏 （window）时，
将另一个分屏自动设置成拷贝地址的目标。

** Exercise
1. Only turn on Linum-mode when doing programming (tips: use prog-mode-hook)
